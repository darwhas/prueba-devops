pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('2a8ee1c6-f50a-410c-8de2-dc668fabca0b')
        DOCKER_IMAGE_NAME = 'prueba-devops'
        DOCKER_HUB_REPO = 'darwhas/prueba-devops'
    }
    
    stages {
        stage('Verificar Repositorio') {
            steps {
                bat '''
                    SET repoDir=prueba-devops
                    IF EXIST %repoDir% (
                        RMDIR /S /Q %repoDir%
                    )
                '''
            }
        }
        
        stage('Clonar Repositorio') {
            steps {
                // Clonar el repositorio de GitHub
                git branch: 'develop', url: 'https://github.com/darwhas/prueba-devops.git'
            }
        }
        
        // stage('Ejecutar Pruebas Unitarias') {
        //     steps {
        //         // Instalar las dependencias necesarias (si es necesario)
        //         bat 'pip install -r requirements.txt'
                
        //         // Ejecutar las pruebas unitarias con pytest
        //         bat 'pytest'
        //     }
            
        //     post {
        //         always {
        //             // Publicar los resultados de las pruebas unitarias
        //             junit 'pytest.xml'  // Archivo XML generado por pytest
        //         }
        //     }
        // }
        
        // stage('An√°lisis SonarQube') {
        //     steps {
        //         script {
        //             def scannerHome = tool 'SonarScanner'
        //             withSonarQubeEnv('SonarQubeServer') {
        //                 bat "${scannerHome}\\bin\\sonar-scanner \
        //                     -Dsonar.projectKey=prueba_devops \
        //                     -Dsonar.sources=."
        //             }
        //         }
        //     }
        // }
        
        stage('Construir Imagen Docker') {
            steps {
                script {
                    docker.build(DOCKER_IMAGE_NAME, '-f Dockerfile .')
                }
            }
        }
        
        stage('Subir Imagen a Docker Hub') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: DOCKER_HUB_CREDENTIALS, usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
                        docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIALS) {
                            docker.image(DOCKER_IMAGE_NAME).push("${env.BUILD_NUMBER}")
                            docker.image(DOCKER_IMAGE_NAME).push("latest")
                        }
                    }
                }
            }
        }
    }
}